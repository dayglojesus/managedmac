# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Returns a Hash for Dsconfigad type suitable for consumption by
#`create_resources`. It will compact the data and transform Booleans into the
#preferred enable|disable toggle. Accepts a single argument, a Hash.
#
#
Puppet::Functions.create_function(:'managedmac::process_dsconfigad_params') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    if args.size != 1
      e = "process_dsconfigad_params(): Wrong number of args: #{args.size} \
for 1"
      raise(Puppet::ParseError, e)
    end

    params = args[0]

    unless params.is_a? Hash
      e = "process_dsconfigad_params(): Wrong arg type! (#{params.class} \
instead of Hash)"
      raise(Puppet::ParseError, e)
    end

    params.inject({}) do |memo, (key,value)|
      value = case value
      when NilClass, :absent, :undef
        nil
      when TrueClass
        'enable'
      when FalseClass
        'disable'
      else
        value
      end
      unless value.nil? or (value.respond_to? :empty? and value.empty?)
        memo[key] = value
      end
      memo
    end

  
  end
end
