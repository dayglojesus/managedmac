# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'time'

# ---- original file header ----
#
# @summary
#   Returns a com.apple.ManagedClient.preferences Payload.
#
#
Puppet::Functions.create_function(:'managedmac::process_mcx_options') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    if args.size != 5
      e = "process_mcx_options(): Wrong number of args: #{args.size} for 5"
      raise(Puppet::ParseError, e)
    end

    bluetooth,
    wifi,
    loginitems,
    suppress_icloud_setup,
    hidden_preference_panes = *args

    settings = {
      'com.apple.MCXBluetooth'      => {},
      'com.apple.MCXAirPort'        => {},
      'loginwindow'                 => {},
      'com.apple.SetupAssistant'    => {},
      'com.apple.systempreferences' => {},
    }

    case bluetooth
    when TrueClass, FalseClass
      settings['com.apple.MCXBluetooth'] = {
        'Forced' => [
          { 'mcx_preference_settings' => { 'DisableBluetooth' => true } }
        ]
      }
    else
      settings.delete('com.apple.MCXBluetooth')
    end

    case wifi
    when TrueClass, FalseClass
      settings['com.apple.MCXAirPort'] = {
        'Forced' => [
          { 'mcx_preference_settings' => { 'DisableAirPort' => true } }
        ]
      }
    else
      settings.delete('com.apple.MCXAirPort')
    end

    if loginitems.empty?
      settings.delete('loginwindow')
    else
      values = loginitems.collect do |path|
        Hash['Hide', false, 'Path', path]
      end
      settings['loginwindow'] = {
        'Forced' => [
          { 'mcx_preference_settings' => {
              'AutoLaunchedApplicationDictionary-managed' => values,
              'DisableLoginItemsSuppression'              => false,
              'LoginUserMayAddItems'                      => true,
            }
          },
        ]
      }
    end

    case suppress_icloud_setup
    when true
      settings['com.apple.SetupAssistant'] = {
        'Set-Once' => [
          { 'mcx_data_timestamp'      => Time.parse('2013-10-29T17:20:10'),
            'mcx_preference_settings' => {
              'DidSeeCloudSetup' => true,
              'LastSeenCloudProductVersion' =>
                lookupvar('macosx_productversion_major'),
            },
          },
        ]
      }
    else
      settings.delete('com.apple.SetupAssistant')
    end

    if hidden_preference_panes.empty?
      settings.delete('com.apple.systempreferences')
    else
      settings['com.apple.systempreferences'] = {
        'Forced' => [
          { 'mcx_preference_settings' => {
              'HiddenPreferencePanes' => hidden_preference_panes,
            }
          },
        ]
      }
    end

    return [] if settings.empty?

    # Return a PayloadContent Array
    hash = { 'PayloadType'    => 'com.apple.ManagedClient.preferences',
             'PayloadContent' => settings,
    }

    [hash]
  
  end
end
